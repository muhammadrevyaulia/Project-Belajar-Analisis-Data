# -*- coding: utf-8 -*-
"""dashboard.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_JNmCqQyjAZnYX6m1paxyMj2h_g7IK-g
"""

!pip install streamlit babel pandas seaborn plotly matplotlib numpy datetime streamlit folium streamlit-folium geopandas streamlit-echarts

from google.colab import drive
drive.mount('/content/googledrive')

"""# Menyiapkan Data Frame"""

import pandas as pd
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
import datetime as dt
import geopandas as gp
import folium
from folium.plugins import MarkerCluster
from streamlit_folium import folium_static
import geopy
from babel.numbers import format_currency
sns.set(style='dark')

all_df = pd.read_csv("/content/googledrive/MyDrive/Submission/dashboard/all_data.csv")
bycity_df = pd.read_csv("/content/googledrive/MyDrive/Submission/E-Commerce Public Dataset/customers_dataset.csv")
bystate_df = pd.read_csv("/content/googledrive/MyDrive/Submission/E-Commerce Public Dataset/customers_dataset.csv")
bygeolocation_df = pd.read_csv("/content/googledrive/MyDrive/Submission/E-Commerce Public Dataset/geolocation_dataset.csv")

"""## create_monthly_orders_df()"""

def create_monthly_orders_df(df):
  monthly_orders_df = df.resample(rule="D", on="order_purchase_timestamp").agg({
      "order_id": "nunique",
      "price": "sum"
  })
  monthly_orders_df = monthly_orders_df.reset_index()
  monthly_orders_df.rename(columns={
      "order_id": "order_count",
      "price": "revenue"
  }, inplace=True)

  return monthly_orders_df

"""## create_sum_orders_items_df()"""

def create_sum_orders_items_df(df):
  sum_orders_items_df = df.groupby("product_category_name").price.sum().sort_values(ascending=False).reset_index()
  return sum_orders_items_df

"""## create_bycity_df()"""

def create_bycity_df(df):
  city_df = df.groupby(by="customer_city").customer_id.nunique().reset_index()
  city_df.rename(columns={
      "customer_id": "customer_count"
  }, inplace=True)

  return create_bycity_df

"""## create_bystate_df()"""

def create_bystate_df(df):
  state_df = df.groupby(by="customer_state").customer_id.nunique().reset_index()
  state_df.rename(columns={
      "customer_id": "customer_count"
  }, inplace=True)

  return create_bystate_df

"""## create_bypaymentvalue_df()"""

def create_revenue_df(df):
    revenue_df = df.groupby(by="price").customer_id.nunique().reset_index()
    revenue_df(columns={
        "product_id": "product_count"
    }, inplace=True)

    return create_revenue_df

"""## create_geolocation_df()"""

def create_geolocation_df(df):
  geolocation_df = df.groupby(by="geolocation_city").geolocation_lat.nunique().reset_index()
  geolocation_df.rename(columns={
      "geolocation_lat": "geolocation_count"
  }, inplace=True)

  return create_geolocation_df

"""## create_rfm_df()"""

def create_rfm_df(df):
  rfm_df = df.groupby(by="customer_id", as_index=False).agg({
      "order_purchase_timestamp": "max",
      "order_id": "nunique",
      "price": "sum"
  })
  rfm_df.columns = ["customer_id", "maximum_order_timestamp", "frequency", "monetary"]

  rfm_df["maximum_order_timestamp"] = pd.to_datetime(rfm_df["maximum_order_timestamp"])
  rfm_df["maximum_order_timestamp"] = rfm_df["maximum_order_timestamp"].dt.date
  timestamp = pd.Timestamp(rfm_df["maximum_order_timestamp"])
  recent_date = df["order_purchase_timestamp"].max()
  rfm_df["recency"] = rfm_df["maximum_order_timestamp"].apply(lambda x: (recent_date - x).days)
  rfm_df.drop("maximum_order_timestamp", axis=1, inplace=True)

  return rfm_df

"""## Membuat datetime_columns"""

datetime_columns = ["order_purchase_timestamp", "order_delivered_customer_date"]
all_df.sort_values(by="order_purchase_timestamp", inplace=True)
all_df.reset_index(inplace=True)

for column in datetime_columns:
    all_df[column] = pd.to_datetime(all_df[column])

"""# Membuat Komponen Filter

"""

min_date = all_df["order_purchase_timestamp"].min()
max_date = all_df["order_purchase_timestamp"].max()

with st.sidebar:
    # Menambahkan logo E-Commerce
    st.image("/content/googledrive/MyDrive/Submission/dashboard/logo.jpg")

    # Mengambil start_date & end_date dari date_input
    start_date, end_date = st.date_input(
        label='Interval Waktu',min_value=min_date,
        max_value=max_date,
        value=[min_date, max_date]
    )

main_df = all_df[(all_df["order_purchase_timestamp"] >= str(start_date)) &
                (all_df["order_purchase_timestamp"] <= str(end_date))]

monthly_orders_df = create_monthly_orders_df(main_df)
sum_order_items_df = create_sum_orders_items_df(main_df)

geolocation_df = create_geolocation_df(bygeolocation_df)

bycity_df = create_bycity_df(bycity_df)
bystate_df = create_bystate_df(bystate_df)

"""# Melengkapi Dashboard dengan Visualisasi Data"""

st.header("Muhammad Collection Dashboard :sparkles:")

"""## Visualization of Daily Orders"""

st.subheader('Daily Orders')

col1, col2 = st.columns(2)

with col1:
    total_orders = monthly_orders_df.order_count.sum()
    st.metric("Total orders", value=total_orders)

with col2:
    total_revenue = format_currency(monthly_orders_df.revenue.sum(), "BRL", locale='es_CO')
    st.metric("Total Revenue", value=total_revenue)

fig, ax = plt.subplots(figsize=(16, 8))
ax.plot(
    monthly_orders_df["order_purchase_timestamp"],
    monthly_orders_df["order_count"],
    marker='o',
    linewidth=2,
    color="#90CAF9"
)
ax.tick_params(axis='y', labelsize=20)
ax.tick_params(axis='x', labelsize=15)

st.pyplot(fig)

"""## Visualisasi Best and Worst Performing Product"""

st.subheader("Best & Worst Performing Product")

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(35, 15))

colors = ["#90CAF9", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3"]

sns.barplot(x="price", y="product_category_name", data=create_sum_orders_items_df(sum_order_items_df).head(5), palette=colors, ax=ax[0])
ax[0].set_ylabel(None)
ax[0].set_xlabel("Number of Sales", fontsize=30)
ax[0].set_title("Best Performing Product", loc="center", fontsize=50)
ax[0].tick_params(axis='y', labelsize=35)
ax[0].tick_params(axis='x', labelsize=30)

sns.barplot(x="price", y="product_category_name", data=sum_order_items_df.sort_values(by="price", ascending=True).head(5), palette=colors, ax=ax[1])
ax[1].set_ylabel(None)
ax[1].set_xlabel("Number of Sales", fontsize=30)
ax[1].invert_xaxis()
ax[1].yaxis.set_label_position("right")
ax[1].yaxis.tick_right()
ax[1].set_title("Worst Performing Product", loc="center", fontsize=50)
ax[1].tick_params(axis='y', labelsize=35)
ax[1].tick_params(axis='x', labelsize=30)

st.pyplot(fig)